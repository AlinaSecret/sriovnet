// Code generated by mockery v1.1.2. DO NOT EDIT.

package mocks

import (
	net "net"

	mock "github.com/stretchr/testify/mock"

	netlink "github.com/vishvananda/netlink"
)

// NetlinkOps is an autogenerated mock type for the NetlinkOps type
type NetlinkOps struct {
	mock.Mock
}

// DevLinkGetAllPortList provides a mock function with given fields:
func (_m *NetlinkOps) DevLinkGetAllPortList() ([]*netlink.DevlinkPort, error) {
	ret := _m.Called()

	var r0 []*netlink.DevlinkPort
	if rf, ok := ret.Get(0).(func() []*netlink.DevlinkPort); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*netlink.DevlinkPort)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DevLinkGetPortByNetdevName provides a mock function with given fields: netdev
func (_m *NetlinkOps) DevLinkGetPortByNetdevName(netdev string) (*netlink.DevlinkPort, error) {
	ret := _m.Called(netdev)

	var r0 *netlink.DevlinkPort
	if rf, ok := ret.Get(0).(func(string) *netlink.DevlinkPort); ok {
		r0 = rf(netdev)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*netlink.DevlinkPort)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(netdev)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LinkByName provides a mock function with given fields: name
func (_m *NetlinkOps) LinkByName(name string) (netlink.Link, error) {
	ret := _m.Called(name)

	var r0 netlink.Link
	if rf, ok := ret.Get(0).(func(string) netlink.Link); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(netlink.Link)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LinkSetUp provides a mock function with given fields: link
func (_m *NetlinkOps) LinkSetUp(link netlink.Link) error {
	ret := _m.Called(link)

	var r0 error
	if rf, ok := ret.Get(0).(func(netlink.Link) error); ok {
		r0 = rf(link)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LinkSetVfHardwareAddr provides a mock function with given fields: link, vf, hwaddr
func (_m *NetlinkOps) LinkSetVfHardwareAddr(link netlink.Link, vf int, hwaddr net.HardwareAddr) error {
	ret := _m.Called(link, vf, hwaddr)

	var r0 error
	if rf, ok := ret.Get(0).(func(netlink.Link, int, net.HardwareAddr) error); ok {
		r0 = rf(link, vf, hwaddr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LinkSetVfNodeGUID provides a mock function with given fields: link, vf, nodeguid
func (_m *NetlinkOps) LinkSetVfNodeGUID(link netlink.Link, vf int, nodeguid net.HardwareAddr) error {
	ret := _m.Called(link, vf, nodeguid)

	var r0 error
	if rf, ok := ret.Get(0).(func(netlink.Link, int, net.HardwareAddr) error); ok {
		r0 = rf(link, vf, nodeguid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LinkSetVfPortGUID provides a mock function with given fields: link, vf, portguid
func (_m *NetlinkOps) LinkSetVfPortGUID(link netlink.Link, vf int, portguid net.HardwareAddr) error {
	ret := _m.Called(link, vf, portguid)

	var r0 error
	if rf, ok := ret.Get(0).(func(netlink.Link, int, net.HardwareAddr) error); ok {
		r0 = rf(link, vf, portguid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LinkSetVfSpoofchk provides a mock function with given fields: link, vf, check
func (_m *NetlinkOps) LinkSetVfSpoofchk(link netlink.Link, vf int, check bool) error {
	ret := _m.Called(link, vf, check)

	var r0 error
	if rf, ok := ret.Get(0).(func(netlink.Link, int, bool) error); ok {
		r0 = rf(link, vf, check)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LinkSetVfTrust provides a mock function with given fields: link, vf, state
func (_m *NetlinkOps) LinkSetVfTrust(link netlink.Link, vf int, state bool) error {
	ret := _m.Called(link, vf, state)

	var r0 error
	if rf, ok := ret.Get(0).(func(netlink.Link, int, bool) error); ok {
		r0 = rf(link, vf, state)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LinkSetVfVlan provides a mock function with given fields: link, vf, vlan
func (_m *NetlinkOps) LinkSetVfVlan(link netlink.Link, vf int, vlan int) error {
	ret := _m.Called(link, vf, vlan)

	var r0 error
	if rf, ok := ret.Get(0).(func(netlink.Link, int, int) error); ok {
		r0 = rf(link, vf, vlan)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
